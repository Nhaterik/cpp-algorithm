// coded by NhatSpeed
#include <bits/stdc++.h>
using namespace std;
int n;
int a[41][41];
void solve(vector<int> &c1, vector<int> &c2)
{
    int add = 0;
    for (int i = 1; i <= 4 * n; i++)
        for (int j = 1; j <= 4 * n; j++)
            a[i][j] = ++add;
    int r = 4 * n, goal = 4 * n,fullsum=16*n*n;
    for (int i = 1; i <= goal; i += 2)
    {
        for (int j = i; j <= r; j++)
        c1.push_back(a[j][i]);
        for(int j=i+1;j<r;j++)
        c1.push_back(a[r][j]);
        for(int j=r-1;j>i;j--)
        c1.push_back(a[j][r-1]);
        for(int j=r-2;j>i+1;j--) 
        c1.push_back(a[i+1][j]);
        r-=2;
    }
    r=4*n;
 for (int i = 1; i <= 4 * n; i++)
        for (int j = 1; j <= 4 * n; j++)
            a[i][j] = fullsum--;
        for (int i = 1; i <= goal; i += 2)
    {
        for (int j = i; j <= r; j++)
        c2.push_back(a[j][i]);
        for(int j=i+1;j<r;j++)
        c2.push_back(a[r][j]);
        for(int j=r-1;j>i;j--)
        c2.push_back(a[j][r-1]);
        for(int j=r-2;j>i+1;j--) //not sure
        c2.push_back(a[i+1][j]);
        r-=2;
    }


}
int main()
{
    int T;
    cin >> T;
    while (T--)
    {
        cin >> n;
        vector<int> c1, c2;
        solve(c1, c2);
        reverse(c1.begin(),c1.end());
        reverse(c2.begin(),c2.end());
        for (auto it : c1)
            cout << it << " ";
        cout << endl;
        for (auto it : c2)
            cout << it << " ";
        cout << endl;
    }
    return 0;
}
